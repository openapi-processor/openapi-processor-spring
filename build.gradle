plugins {
    id 'jacoco'
    id 'groovy'
    id 'java-library'
    id 'maven-publish'
    id 'signing'
    alias(libs.plugins.kotlin)
    alias(libs.plugins.sonar)
    alias(libs.plugins.nexus)
    alias(libs.plugins.versions)
}

group = projectGroupId
version = projectVersion
println("version: $version")

repositories {
    mavenLocal()
    mavenCentral()
    maven {
        url = "https://central.sonatype.com/content/repositories/snapshots"
    }
}

testing {
    suites {
        test {
            useJUnitJupiter(libs.versions.junit.get())
        }

        testInt(JvmTestSuite) {
            useJUnitJupiter(libs.versions.junit.get())

            dependencies {
                implementation(project())
            }

            sources {
                java {
                    srcDirs = ['src/testInt/kotlin']
                }
            }

            targets {
                configureEach {
                    testTask.configure {
                        shouldRunAfter(test)
                    }
                }
            }
        }
    }
}

tasks.named('check') {
    dependsOn(testing.suites.testInt)
}

sourceSets {
  main {
    java {
        srcDirs "${buildDir}/version"
    }
  }
}

java {
    withJavadocJar ()
    withSourcesJar ()
}

kotlin {
    jvmToolchain(libs.versions.build.jdk.get() as Integer)
}


compileKotlin.dependsOn "generateVersion"

compileTestGroovy {
    dependsOn 'compileKotlin'
    classpath += files(compileKotlin.destinationDirectory)
}


tasks.named('compileKotlin') {
    dependsOn 'generateVersion'
}

tasks.named('sourcesJar') {
    dependsOn 'generateVersion'
}

dependencies {
    implementation (libs.openapi.processor.api)
    implementation (libs.openapi.processor.core)
    implementation (libs.openapi.processor.test.api)
    implementation (libs.openapi.processor.parser.api)
    implementation (libs.openapi.processor.parser.swagger)
    implementation (libs.openapi.processor.parser.openapi4j)
    implementation (libs.slf4j)

    testImplementation (libs.openapi.processor.api)
    testImplementation (libs.openapi.processor.core)
    testImplementation (libs.openapi.processor.test.api)
    testImplementation (libs.openapi.processor.test.base)
    testImplementation (libs.openapi.processor.parser.api)
    testImplementation (libs.openapi.processor.parser.swagger)
    testImplementation (libs.openapi.processor.parser.openapi4j)
    testImplementation platform(libs.groovy.bom)
    testImplementation ("org.apache.groovy:groovy")
    testImplementation ("org.apache.groovy:groovy-nio")
    testImplementation (libs.spock)
    testImplementation (platform(libs.kotest.bom))
    testImplementation (libs.kotest.runner)
    testImplementation (libs.kotest.datatest)
    testImplementation (libs.mockk)
    testImplementation (libs.logback)
    testImplementation (libs.jimfs)

    testIntImplementation (libs.openapi.processor.api)
    testIntImplementation (libs.openapi.processor.core)
    testIntImplementation (libs.openapi.processor.test.api)
    testIntImplementation (libs.openapi.processor.test.base)
    testIntImplementation (libs.openapi.processor.parser.api)
    testIntImplementation (libs.openapi.processor.parser.swagger)
    testIntImplementation (libs.openapi.processor.parser.openapi4j)
    testIntImplementation platform(libs.groovy.bom)
    testIntImplementation ("org.apache.groovy:groovy")
    testIntImplementation ("org.apache.groovy:groovy-nio")
    testIntImplementation (libs.spock)
    testIntImplementation (platform(libs.kotest.bom))
    testIntImplementation (libs.kotest.runner)
    testIntImplementation (libs.kotest.datatest)
    testIntImplementation (libs.mockk)
    testIntImplementation (libs.logback)
    testIntImplementation (libs.jimfs)
    testIntImplementation (libs.spring.web)
    testIntImplementation (libs.spring.data)
}

//tasks.named("dependencyUpdates").configure {
//    rejectVersionIf {
//        String v = it.candidate.version
//        println "candidate: $v"
//        return v.endsWith ("-M1") || v.contains ("alpha") || v.contains ("beta")
//    }
//}

tasks.withType(Test).configureEach {
    jvmArgs(
        "--add-exports", "jdk.compiler/com.sun.tools.javac.api=ALL-UNNAMED",
        "--add-exports", "jdk.compiler/com.sun.tools.javac.code=ALL-UNNAMED",
        "--add-exports", "jdk.compiler/com.sun.tools.javac.file=ALL-UNNAMED",
        "--add-exports", "jdk.compiler/com.sun.tools.javac.parser=ALL-UNNAMED",
        "--add-exports", "jdk.compiler/com.sun.tools.javac.tree=ALL-UNNAMED",
        "--add-exports", "jdk.compiler/com.sun.tools.javac.util=ALL-UNNAMED"
    )

    javaLauncher.set(javaToolchains.launcherFor {
        languageVersion.set(JavaLanguageVersion.of(libs.versions.test.jdk.get()))
    })

    finalizedBy jacocoTestReport
}

jacoco {
    toolVersion = libs.versions.jacoco.get()
}

jacocoTestReport {
    reports {
        xml.required = true
        html.required = false
        csv.required = false
    }

    getExecutionData().setFrom(fileTree(buildDir).include("/jacoco/*.exec"))
}

sonarqube {
  properties {
    property "sonar.projectKey", "openapi-processor_openapi-processor-spring"
    property "sonar.organization", "openapi-processor"
    property "sonar.host.url", "https://sonarcloud.io"
    property "sonar.coverage.jacoco.xmlReportPaths", "$buildDir/reports/jacoco/test/jacocoTestReport.xml"
  }
}

apply plugin: VersionPlugin
apply from: "${rootProject.rootDir}/gradle/publishing.gradle"
apply from: "${rootProject.rootDir}/gradle/publishing.tasks.gradle.kts"
